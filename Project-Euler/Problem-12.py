# -*- coding: utf-8 -*-
"""
Created on Thu Mar 03 20:24:35 2016

@author: wxt
"""

"""
Problem 12:

The sequence of triangle numbers is generated by adding the natural numbers. So
the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten
terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

"""
import math

def triangle():
    
    idx = 1
    while True:
        yield sum(xrange(idx+1))
        idx += 1
# Brute force
def getfactors(num):
    
    count = 2
    maxiter = int(math.sqrt(num))
    if maxiter ** 2 == num:
        count += 1
        maxiter -= 1
        
    for i in xrange(2, maxiter+1):
        if num % i == 0:
            count += 2
    
    return count

def bruteforce(facnum):
    tri = triangle()
    for num in tri:
        count = getfactors(num)
        if count > facnum:
            return num


if __name__ == '__main__':
    
    num = bruteforce(500)